From e17b708d086b287c05e928f95f3adb8ab7c57000 Mon Sep 17 00:00:00 2001
From: a1045520 <a1045520@gmail.com>
Date: Thu, 2 Dec 2021 08:05:34 +0800
Subject: [PATCH 1/2] Add opentelemetry-tide to instrument REST API

---
 Cargo.lock                           | 178 +++++++++++++++++++++++++++
 plugins/zenoh-plugin-rest/Cargo.toml |   4 +
 plugins/zenoh-plugin-rest/src/lib.rs |  36 ++++++
 3 files changed, 218 insertions(+)

diff --git a/Cargo.lock b/Cargo.lock
index c2581a3..68b7edd 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -459,6 +459,12 @@ dependencies = [
  "stable_deref_trait",
 ]
 
+[[package]]
+name = "byteorder"
+version = "1.4.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610"
+
 [[package]]
 name = "bytes"
 version = "1.1.0"
@@ -899,6 +905,12 @@ dependencies = [
  "spin 0.9.2",
 ]
 
+[[package]]
+name = "fnv"
+version = "1.0.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1"
+
 [[package]]
 name = "form_urlencoded"
 version = "1.0.1"
@@ -1262,6 +1274,12 @@ dependencies = [
  "cfg-if 1.0.0",
 ]
 
+[[package]]
+name = "integer-encoding"
+version = "1.1.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "48dc51180a9b377fd75814d0cc02199c20f8e99433d6762f650d39cdbbd3b56f"
+
 [[package]]
 name = "ipnetwork"
 version = "0.18.0"
@@ -1478,12 +1496,117 @@ version = "0.1.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "28988d872ab76095a6e6ac88d99b54fd267702734fd7ffe610ca27f533ddb95a"
 
+[[package]]
+name = "opentelemetry"
+version = "0.16.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e1cf9b1c4e9a6c4de793c632496fa490bdc0e1eea73f0c91394f7b6990935d22"
+dependencies = [
+ "async-std",
+ "async-trait",
+ "crossbeam-channel",
+ "dashmap",
+ "fnv",
+ "futures",
+ "js-sys",
+ "lazy_static",
+ "percent-encoding",
+ "pin-project",
+ "rand 0.8.4",
+ "thiserror",
+]
+
+[[package]]
+name = "opentelemetry-jaeger"
+version = "0.15.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "db22f492873ea037bc267b35a0e8e4fb846340058cb7c864efe3d0bf23684593"
+dependencies = [
+ "async-std",
+ "async-trait",
+ "lazy_static",
+ "opentelemetry",
+ "opentelemetry-semantic-conventions",
+ "thiserror",
+ "thrift",
+]
+
+[[package]]
+name = "opentelemetry-prometheus"
+version = "0.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4ee9c06c1366665e7d4dba6540a42ea48900a9c92dc5b963f3ae05fbba76dc63"
+dependencies = [
+ "opentelemetry",
+ "prometheus",
+ "protobuf",
+]
+
+[[package]]
+name = "opentelemetry-semantic-conventions"
+version = "0.8.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ffeac823339e8b0f27b961f4385057bf9f97f2863bc745bd015fd6091f2270e9"
+dependencies = [
+ "opentelemetry",
+]
+
+[[package]]
+name = "opentelemetry-tide"
+version = "0.11.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9595e48afe2e677e3f83b8f81ca083e4c9ab80a56cf80d9ea6b2d4061a6fbac6"
+dependencies = [
+ "http-types",
+ "kv-log-macro",
+ "opentelemetry",
+ "opentelemetry-prometheus",
+ "opentelemetry-semantic-conventions",
+ "prometheus",
+ "tide",
+ "url",
+]
+
+[[package]]
+name = "ordered-float"
+version = "1.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3305af35278dd29f46fcdd139e0b1fbfae2153f0e5928b39b035542dd31e37b7"
+dependencies = [
+ "num-traits",
+]
+
 [[package]]
 name = "parking"
 version = "2.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "427c3892f9e783d91cc128285287e70a59e206ca452770ece88a76f7a3eddd72"
 
+[[package]]
+name = "parking_lot"
+version = "0.11.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7d17b78036a60663b797adeaee46f5c9dfebb86948d1255007a1d6be0271ff99"
+dependencies = [
+ "instant",
+ "lock_api",
+ "parking_lot_core",
+]
+
+[[package]]
+name = "parking_lot_core"
+version = "0.8.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d76e8e1493bcac0d2766c42737f34458f1c8c50c0d23bcb24ea953affb273216"
+dependencies = [
+ "cfg-if 1.0.0",
+ "instant",
+ "libc",
+ "redox_syscall",
+ "smallvec",
+ "winapi",
+]
+
 [[package]]
 name = "pem"
 version = "0.8.3"
@@ -1716,6 +1839,27 @@ dependencies = [
  "unicode-xid",
 ]
 
+[[package]]
+name = "prometheus"
+version = "0.12.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5986aa8d62380092d2f50f8b1cdba9cb9b6731ffd4b25b51fd126b6c3e05b99c"
+dependencies = [
+ "cfg-if 1.0.0",
+ "fnv",
+ "lazy_static",
+ "memchr",
+ "parking_lot",
+ "protobuf",
+ "thiserror",
+]
+
+[[package]]
+name = "protobuf"
+version = "2.25.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "47c327e191621a2158159df97cdbc2e7074bb4e940275e35abf38eb3d2595754"
+
 [[package]]
 name = "quinn"
 version = "0.7.2"
@@ -2224,6 +2368,12 @@ version = "0.4.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "c307a32c1c5c437f38c7fd45d753050587732ba8628319fbdf12a7e289ccc590"
 
+[[package]]
+name = "smallvec"
+version = "1.7.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1ecab6c735a6bb4139c0caafd0cc3635748bbb3acf4550e8138122099251f309"
+
 [[package]]
 name = "socket2"
 version = "0.3.19"
@@ -2391,6 +2541,28 @@ dependencies = [
  "syn",
 ]
 
+[[package]]
+name = "threadpool"
+version = "1.8.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d050e60b33d41c19108b32cea32164033a9013fe3b46cbd4457559bfbf77afaa"
+dependencies = [
+ "num_cpus",
+]
+
+[[package]]
+name = "thrift"
+version = "0.13.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0c6d965454947cc7266d22716ebfd07b18d84ebaf35eec558586bbb2a8cb6b5b"
+dependencies = [
+ "byteorder",
+ "integer-encoding",
+ "log",
+ "ordered-float",
+ "threadpool",
+]
+
 [[package]]
 name = "tide"
 version = "0.16.0"
@@ -2841,6 +3013,8 @@ dependencies = [
  "libloading",
  "log",
  "nix",
+ "opentelemetry",
+ "opentelemetry-jaeger",
  "petgraph",
  "quinn",
  "rand 0.8.4",
@@ -2888,6 +3062,10 @@ dependencies = [
  "futures",
  "http-types",
  "log",
+ "opentelemetry",
+ "opentelemetry-jaeger",
+ "opentelemetry-semantic-conventions",
+ "opentelemetry-tide",
  "serde_json",
  "tide",
  "zenoh",
diff --git a/plugins/zenoh-plugin-rest/Cargo.toml b/plugins/zenoh-plugin-rest/Cargo.toml
index 82af216..9bff7c5 100644
--- a/plugins/zenoh-plugin-rest/Cargo.toml
+++ b/plugins/zenoh-plugin-rest/Cargo.toml
@@ -51,6 +51,10 @@ serde_json = "1.0"
 tide = "0.16.0"
 zenoh = { path = "../../zenoh" }
 zenoh-plugin-trait = { path = "../zenoh-plugin-trait", default-features = false }
+opentelemetry = { version = "0.16.0", features = ["rt-async-std"] }
+opentelemetry-jaeger = { version = "0.15.0", features = ["rt-async-std"] }
+opentelemetry-tide = "0.11"
+opentelemetry-semantic-conventions = "0.8"
 
 [[example]]
 name = "zn_serve_sse"
diff --git a/plugins/zenoh-plugin-rest/src/lib.rs b/plugins/zenoh-plugin-rest/src/lib.rs
index 98e9259..b6ab921 100644
--- a/plugins/zenoh-plugin-rest/src/lib.rs
+++ b/plugins/zenoh-plugin-rest/src/lib.rs
@@ -26,6 +26,16 @@ use zenoh::net::*;
 use zenoh::{Change, Selector, Value};
 use zenoh_plugin_trait::prelude::*;
 
+use opentelemetry_tide::{MetricsConfig, TideExt};
+use opentelemetry_semantic_conventions::resource;
+use opentelemetry::sdk::{
+    propagation::TraceContextPropagator,
+    trace::Tracer,
+};
+use opentelemetry::{global, trace::TraceError};
+
+const SVC_NAME: &str = env!("CARGO_CRATE_NAME");
+const VERSION: &str = env!("CARGO_PKG_VERSION");
 const PORT_SEPARATOR: char = ':';
 const DEFAULT_HTTP_HOST: &str = "0.0.0.0";
 const DEFAULT_HTTP_PORT: &str = "8000";
@@ -364,6 +374,26 @@ async fn write(mut req: Request<(Arc<Session>, String)>) -> tide::Result<Respons
     }
 }
 
+#[inline]
+fn init_tracer(svc_name: &str, version: &str, instance_id: &str) -> Result<Tracer, TraceError> {
+    // W3C spec: https://www.w3.org/TR/trace-context/ - only for trace context info
+    global::set_text_map_propagator(TraceContextPropagator::new());
+
+    // (option) A set of standardized attributes, ref: https://github.com/open-telemetry/opentelemetry-specification/tree/main/specification/resource/semantic_conventions
+    let tags = [
+        resource::SERVICE_VERSION.string(version.to_owned()),
+        resource::SERVICE_INSTANCE_ID.string(instance_id.to_owned()),
+        resource::PROCESS_EXECUTABLE_PATH.string(std::env::current_exe().unwrap().display().to_string()),
+        resource::PROCESS_PID.string(std::process::id().to_string()),
+    ];
+
+    // Initialize the tracker with jaeger as backend
+    opentelemetry_jaeger::new_pipeline()
+        .with_service_name(svc_name)
+        .with_tags(tags.iter().map(ToOwned::to_owned))
+        .install_batch(opentelemetry::runtime::AsyncStd)
+}
+
 pub async fn run(runtime: Runtime, port: String) {
     // Try to initiate login.
     // Required in case of dynamic lib, otherwise no logs.
@@ -372,6 +402,8 @@ pub async fn run(runtime: Runtime, port: String) {
 
     let http_port = parse_http_port(&port);
 
+    let tracer = init_tracer(SVC_NAME, VERSION, "Zenoh REST library").unwrap();
+
     let pid = runtime.get_pid_str();
     let session = Session::init(runtime, true, vec![], vec![]).await;
 
@@ -387,6 +419,8 @@ pub async fn run(runtime: Runtime, port: String) {
             .allow_credentials(false),
     );
 
+    app.with_middlewares(tracer, MetricsConfig::default());
+    
     app.at("/").get(query);
     app.at("*").get(query);
 
@@ -402,6 +436,8 @@ pub async fn run(runtime: Runtime, port: String) {
     if let Err(e) = app.listen(http_port).await {
         log::error!("Unable to start http server for REST : {:?}", e);
     }
+    opentelemetry::global::force_flush_tracer_provider();
+    opentelemetry::global::shutdown_tracer_provider();
 }
 
 fn path_to_resource(path: &str, pid: &str) -> ResKey {
-- 
2.25.1

